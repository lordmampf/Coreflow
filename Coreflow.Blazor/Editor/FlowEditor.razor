
<button @onclick="ShowCode">Show Code</button>




<div class="cf-editor-main">


    @if (Code != null)
    {
        <CodeEditor Code="@Code" />
    }
    else
    {
        <CascadingValue Value="this">

            <CodeCreatorList CodeCreatorStorage="CodeCreatorStorage" />

            <div class="cf-code-creator-container-main">
                <DefaultCodeCreatorEditor FlowDefinition="FlowDefinition" CodeCreator="FlowDefinition.CodeCreator" DropZoneEnabled="DropZonesVisible" />
            </div>

            @if (!DropZonesVisible)
            {
                <DefaultCodeCreatorParameterEditor @ref="mParameterEditor" CodeCreator="SelectedCodeCreator" />
            }

        </CascadingValue>
    }
</div>


@code {


    [Parameter]
    public FlowDefinition FlowDefinition { get; set; }

    [Parameter]
    public CodeCreatorStorage CodeCreatorStorage { get; set; }

    protected FlowEditorEvents Events { get; set; }

    public ICodeCreator SelectedCodeCreator { get; set; }

    protected bool DropZonesVisible { get; set; }

    protected string Code { get; set; }

    protected DefaultCodeCreatorParameterEditor mParameterEditor;

    protected override void OnParametersSet()
    {
    }

    internal async Task OnSelectCodeCreator(ICodeCreator pCodeCreator)
    {
        SelectedCodeCreator = pCodeCreator;

        if (Events?.OnAfterSelect != null)
        {
            await Events.OnAfterSelect.InvokeAsync();
        }

        InvokeStateHasChanged();
    }

    public void RegisterEvents(FlowEditorEvents pEvents)
    {
        Events = pEvents;
    }

    public void ShowDropZones(ICodeCreator pCodeCreator)
    {
        SelectedCodeCreator = pCodeCreator;
        DropZonesVisible = true;
        InvokeStateHasChanged();
    }

    public void HideDropZones()
    {
        SelectedCodeCreator = null;
        DropZonesVisible = false;
        InvokeStateHasChanged();
    }

    public void MoveSelectedCodeCreatorBefore(ICodeCreator pAfterCodeCreator)
    {
        var newParentInfo = FlowDefinition.FindParentOf(pAfterCodeCreator);
        var newParentCCList = newParentInfo.parent.CodeCreators[newParentInfo.indexContext];
        int newIndex = newParentCCList.IndexOf(pAfterCodeCreator);

        var oldParentInfo = FlowDefinition.FindParentOf(SelectedCodeCreator);

        if (oldParentInfo.parent == null)
        {
            newParentCCList.Insert(newIndex, SelectedCodeCreator);
            StateHasChanged();
            return;
        }

        List<ICodeCreator> oldParentCCList = oldParentInfo.parent.CodeCreators[oldParentInfo.indexContext];
        int oldIndex = oldParentCCList.IndexOf(SelectedCodeCreator);

        newParentCCList.Insert(newIndex, SelectedCodeCreator);

        if (newParentInfo.parent == oldParentInfo.parent)
            if (oldIndex >= newIndex)
                oldIndex++;

        if (oldIndex != -1)
            oldParentCCList.RemoveAt(oldIndex);

        InvokeStateHasChanged();
    }

    public void MoveSelectedCodeCreatorIn(ICodeCreatorContainerCreator pContainer, int pSequence)
    {
        var oldParentInfo = FlowDefinition.FindParentOf(SelectedCodeCreator);

        if (oldParentInfo.parent == null)
        {
            pContainer.CodeCreators[pSequence].Add(SelectedCodeCreator);
            StateHasChanged();
            return;
        }

        var oldParentCCList = oldParentInfo.parent.CodeCreators[oldParentInfo.indexContext];
        int oldIndex = oldParentCCList.IndexOf(SelectedCodeCreator);

        pContainer.CodeCreators[pSequence].Add(SelectedCodeCreator);

        int newIndex = pContainer.CodeCreators[pSequence].Count - 1;

        if (pContainer == oldParentInfo.parent)
            if (oldIndex >= newIndex)
                oldIndex++;

        oldParentCCList.RemoveAt(oldIndex);
        InvokeStateHasChanged();
    }

    public void SetSelectedCodeCreatorAsRoot()
    {
        FlowDefinition.CodeCreator = SelectedCodeCreator;
        InvokeStateHasChanged();
    }

    public void RemoveSelectedCodeCreator()
    {
        if (SelectedCodeCreator == FlowDefinition.CodeCreator)
        {
            FlowDefinition.CodeCreator = null;
            SelectedCodeCreator = null;
            InvokeStateHasChanged();
            return;
        }

        var oldParentInfo = FlowDefinition.FindParentOf(SelectedCodeCreator);

        var oldParentCCList = oldParentInfo.parent.CodeCreators[oldParentInfo.indexContext];
        int oldIndex = oldParentCCList.IndexOf(SelectedCodeCreator);
        oldParentCCList.RemoveAt(oldIndex);

        SelectedCodeCreator = null;
        InvokeStateHasChanged();
    }

    public void ShowCode()
    {
        if (Code != null)
        {
            Code = null;
            InvokeStateHasChanged();
            return;
        }

        var flowCode = FlowDefinition.GenerateFlowCode();

        if (System.Runtime.InteropServices.RuntimeInformation.OSArchitecture == System.Runtime.InteropServices.Architecture.Wasm)
        {
            Code = flowCode.Code;
            return;
        }

        Code = flowCode.FormattedCode;
    }

    public void InvokeStateHasChanged()
    {
        StateHasChanged();
    }


}
